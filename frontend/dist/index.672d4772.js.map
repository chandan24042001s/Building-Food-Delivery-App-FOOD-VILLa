{"mappings":"AAAA,KAAK,cAAc,CAAC;AACpB,MAAM,WAAW,SAAS,gBAAgB,CAAC;AAC3C,MAAM,OAAO;AACb,MAAM,SAAS,CAAC,MAAQ,GAAG,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;AACnE,MAAM,QAAQ,CAAC,OAAS,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;AACrE,MAAM,gBAAgB,CACrB,SACA,UACA,GACA,GACA,UACA,UACA,aACA,aACA;IAEC,IAAI,SAAS;QAAC;QAAW;QAAW;QAAW;QAAW;KAAU;IACpE,IAAK,IAAI,IAAI,WAAW,GAAG,KAAK,GAAG,IAAK;QACtC,MAAM,QAAQ,KAAK,KAAK,CAAC,MAAM,CAAC,UAAU;QAC1C,MAAM,WAAW,KAAK,KAAK,CAAC,MAAM,CAAC,aAAa;QAChD,MAAM,WAAW,SAAS,aAAa,CAAC;QACxC,SAAS,KAAK,CAAC,WAAW,CAAC,oBAAoB,OAAO;QACtD,QAAQ,WAAW,CAAC;QACpB,KAAK,GAAG,CAAC,UAAU;YACjB,SAAS;YACT,OAAO,KAAK,KAAK,CAAC,MAAM,CAAC,KAAK;YAC9B;YACA;QACF;QACA,MAAM,KAAK,KAAK,QAAQ,CAAC;YACvB;gBACE,SAAS,MAAM;YACjB;QACF;QACA,GAAG,EAAE,CACH,UACA;YACE,SAAS;YACT,UAAU;QACZ,GACA,GAEC,EAAE,CACD,UACA;YACE,WAAW,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,IAAI,MAAM,IAAI,MAAM,CAAC;YACvD,WAAW,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,IAAI,MAAM,IAAI,MAAM,CAAC;YACvD,WAAW;gBACT;gBACA;gBACA;YACF;YACA,UAAU;QACZ,GACA,GAED,EAAE,CACD,UACA;YACE,SAAS;YACT,UAAU;QACZ,GACA;IAEN;AACF;AAEA,MAAM,QAAQ;IACZ,KAAK,MAAM,WAAW,SAAU;QAC9B,cAAc,SAAS,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,KAAK;QACpD,MAAM,MAAM;IACd;AACF;AAEA","sources":["script.js"],"sourcesContent":["gsap.registerPlugin(Physics2DPlugin);\r\nconst emitters = document.querySelectorAll(\".emitter\");\r\nconst turn = 360;\r\nconst sample = (arr) => arr[Math.floor(Math.random() * arr.length)];\r\nconst sleep = (time) => new Promise((resolve) => setTimeout(resolve, time));\r\nconst makeParticles = (\r\n\temitter,\r\n\tquantity,\r\n\tx,\r\n\ty,\r\n\tminAngle,\r\n\tmaxAngle,\r\n\tminVelocity,\r\n\tmaxVelocity,\r\n\tgravity\r\n) => {\r\n  let colors = [\"#4ec0e9\", \"#ffce52\", \"#ed5464\", \"#8e44ad\", \"#2ecc71\"];\r\n  for (let i = quantity - 1; i >= 0; i--) {\r\n    const angle = gsap.utils.random(minAngle, maxAngle);\r\n    const velocity = gsap.utils.random(minVelocity, maxVelocity);\r\n    const particle = document.createElement(\"div\");\r\n    particle.style.setProperty(\"--particle-color\", sample(colors));\r\n    emitter.appendChild(particle);\r\n    gsap.set(particle, {\r\n      opacity: 0,\r\n      scale: gsap.utils.random(0.3, 0.8),\r\n      x,\r\n      y\r\n    });\r\n    const t1 = gsap.timeline({\r\n      onComplete() {\r\n        particle.remove();\r\n      }\r\n    });\r\n    t1.to(\r\n      particle,\r\n      {\r\n        opacity: 1,\r\n        duration: 0.05\r\n      },\r\n      0\r\n    )\r\n      .to(\r\n        particle,\r\n        {\r\n          rotationX: `+=${gsap.utils.random(2 * turn, 4 * turn)}`,\r\n          rotationZ: `+=${gsap.utils.random(2 * turn, 4 * turn)}`,\r\n          physics2D: {\r\n            angle,\r\n            velocity,\r\n            gravity\r\n          },\r\n          duration: 2\r\n        },\r\n        0\r\n      )\r\n      .to(\r\n        particle,\r\n        {\r\n          opacity: 0,\r\n          duration: 1\r\n        },\r\n        0.8\r\n      );\r\n  }\r\n};\r\n\r\nconst start = async () => {\r\n  for (const emitter of emitters) {\r\n    makeParticles(emitter, 200, -4, 6, 0, 360, 60, 120, 60);\r\n    await sleep(500);\r\n  }\r\n};\r\n\r\nstart();"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}